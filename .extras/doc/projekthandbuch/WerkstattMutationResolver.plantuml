@startuml Controller-Klasse

interface Promise<T>

package @nestjs/graphql {
  class "@Resolver" as Resolver
  hide Resolver circle

  class "@UseGuards" as UseGuards
  hide UseGuards circle

  class "@UseInterceptors" as UseInterceptors
  hide UseInterceptors circle

  class "@Mutation" as Mutation
  hide Mutation circle

  class "@Args" as Args
  hide Args circle
}

package nest-keycloak-connect {
  class AuthGuard

  class "@Roles" as Roles
  hide Roles circle
}

package werkstatt #DDDDDD {
  package entity #FFFFFF {
    class Werkstatt <<entity>>
  }

  package service #FFFFFF {
    class WerkstattWriteService << control >>
  }

  class "type WerkstattDTO = Omit<Werkstatt, 'angestellte' | 'aktualisiert' | 'erzeugt'" as WerkstattDTO
  hide WerkstattDTO circle

    interface IdInput {
        id: number
    }

  class WerkstattMutationResolver << control >> << @Resolver() >> << @UseGuards() >> << @UseInterceptors() >> {
    + @Mutation() @Roles() async create(@Args() WerkstattDTO: WerkstattDTO): Promise<number>
    + @Mutation() @Roles() async update(@Args() WerkstattDTO: WerkstattDTO): Promise<number>
    + @Mutation() @Roles() async delete(@Args() id: IdInput): Promise<boolean>
  }

  WerkstattMutationResolver o-down-> "1" WerkstattWriteService : service

  WerkstattMutationResolver ..> Werkstatt
  WerkstattMutationResolver ..> WerkstattDTO
  WerkstattMutationResolver ..> IdInput
  WerkstattDTO .up.> Werkstatt
  WerkstattMutationResolver ..> Promise
  WerkstattMutationResolver ..> Resolver

  WerkstattMutationResolver .up.> AuthGuard
  WerkstattMutationResolver .up.> Roles

  WerkstattDTO .[hidden].> Promise
  WerkstattDTO .[hidden].> Resolver
}

hide empty members

footer (c) Jannis Groth

@enduml
